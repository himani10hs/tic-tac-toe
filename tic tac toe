//first we need to create a design for a tic tac toe baord
//in this board ,we will create a matrix of 3*3 which will contain 9 boxes
//the user will enter the value and then on the basis of enter value,result will be predicted
//the user can only use 8 spaces because the result can be predicted ,one may not need to use the last left row(the match will not draw)

#include<iostream>
using namespace std;
 char square[10]={'0','1','2','3','4','5','6','7','8','9'};

int win();
void box();
 int main()
 {
  int user=1,i,move;
  char m;
  //it will create an array "square" with their  respective positions
 
  do{
     box();
  user=(user%2)?1:2; //it will tell the which user is playing first
  cout<<"user"<<user<<"enter any  number:";
  cin>>move;
  m=(user==1)?'X':'0';
  //determine the choice of user on any position
  if (move==1 && square[1]=='1')
  square[1]=m;
  else if(move==2 && square[2]=='2')
  square[2]=m;
  else if(move==3 && square[3]=='3')
  square[3]=m;
  else if(move==4 && square[4]=='4')
  square[4]=m;
  else if(move==5 && square[5]=='5')
  square[5]=m;
  else if(move==6 && square[6]=='6')
  square[6]=m;
  else if(move==7  && square[7]=='7')
  square[7]=m;
  else if(move==8&&square[8]=='8')
  square[8]=m;
  else if(move==9&&square[9]=='9')
  square[9]=m;
  else 
   { 
   cout<<"not accepted"<<endl;
   user--;
   cin.ignore();
   cin.get();
   }
   i=win();
  
   user++;
  }
   while(i==-1);
   box();
   if(i==1)
   cout<<"user"<<user<<"win";
   else
   
   //game will draw if there will be no conclusion of game 
   cout<<"game draw"<<endl;
   cin.ignore();
   cin.get();
   
   return 0;
   
 }
   //make function for winner of game
   int win()
   {
   //1st row check
   if(square[1]==square[2]&& square[2]==square[3])
   return 1;
   //2nd row check
   else if(square[4]==square[5]&& square[5]==square[6])
   return 1;
   //3rd row check
   else if(square[7]==square[8]&& square[8]==square[9])
   return 1;
   //1st column check
    else if(square[1]==square[4]&& square[4]==square[7])
    return 1;
   //2nd column check
    else if(square[2]==square[5]&& square[5]==square[8])
    return 1;
    //3rd column check
     else if(square[3]==square[6]&& square[6]==square[9])
    return 1;
    //diagonal check
     else if(square[1]==square[5]&& square[5]==square[9])
    return 1;
    //diagonal check
     else if(square[3]==square[5]&& square[5]==square[7])
    return 1;
    //1 box will always left ,if a user will win(one can predict the win factor before going to the last left position
     else if(square[1]!='1'&&square[2]!='2'&& square[3]!='3'&&square[4]!='4'&&square[5]!='5'&& square[6]!='6'&&square[7]!='7'&&square[8]!='8'&& square[9]!='9')
       return 0;
    else
       return -1;
    
   } 
 
void  box()
{

 cout<<"Tic tac toe"<<endl;
 //enter the player 1 and player 2 values(0,X)
 cout<<"player 1(X) and player 2(0)"<<endl;
 //now enter the structure of tic tac toe
 cout<<"    |    |    "<<endl;
 cout<<"    "<<square[1]<<" | "<<square[2]<<" | "<<square[3]<<endl;
 cout<<"____|____|____"<<endl;
 cout<<"    |    |    "<<endl;
  
 cout<<"   "<<square[4]<<" | "<<square[5]<<" | "<<square[6]<<endl;
 cout<<"____|____|____"<<endl;
 cout<<"    |    |    "<<endl;
 cout<<"    "<<square[7]<<" | "<<square[8]<<" | "<<square[9]<<endl;
 cout<<"    |    |    "<<endl;
 //it will create the matrix for tic  tac toe box
 }
